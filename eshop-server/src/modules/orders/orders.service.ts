import { Injectable, NotFoundException, BadRequestException } from '@nestjs/common';
import { InjectModel } from '@nestjs/mongoose';
import { Model } from 'mongoose';
import { Order } from './schemas/order.schema';
import { Cart } from '../cart/schemas/cart.schema';
import { Product } from '../products/schemas/product.schema';
import { CreateOrderDto } from './dtos/create-order.dto';
import { CartService } from '../cart/cart.service';

// üîπ —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∞ —É—Ç–∏–ª—ñ—Ç–∞ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è id –ø—Ä–æ–¥—É–∫—Ç—É
function getProductId(p: string | Product): string {
  return typeof p === 'string' ? p : p._id.toString();
}

@Injectable()
export class OrdersService {
  constructor(
    @InjectModel(Order.name) private orderModel: Model<Order>,
    @InjectModel(Product.name) private productModel: Model<Product>,
    @InjectModel(Cart.name) private cartModel: Model<Cart>,
    private readonly cartService: CartService,
  ) {}

  // üîπ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ –∫–æ—à–∏–∫–∞
  async create(dto: CreateOrderDto): Promise<Order> {
    const cart = await this.cartModel
      .findOne({ userId: dto.userId })
      .populate('items.product');

    if (!cart || cart.items.length === 0) {
      throw new BadRequestException('–ö–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π');
    }

    // üîπ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—ñ–≤ —ñ –∑–∞–ª–∏—à–∫–∏
    for (const item of cart.items) {
      const productId = getProductId(item.product);
      const product = await this.productModel.findById(productId);

      if (!product) {
        throw new NotFoundException(`–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: ${productId}`);
      }

      if (product.stock < item.quantity) {
        throw new BadRequestException(
          `–ù–µ –≤–∏—Å—Ç–∞—á–∞—î —Ç–æ–≤–∞—Ä—É "${product.name}". –£ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ ${product.stock}, –ø–æ—Ç—Ä—ñ–±–Ω–æ ${item.quantity}.`,
        );
      }
    }

    // üîπ —Å—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    const order = await this.orderModel.create({
      userId: dto.userId,
      items: cart.items.map((i) => {
        const p = typeof i.product === 'string' ? null : (i.product as Product);
        return {
          product: getProductId(i.product),
          name: p?.name || '–ù–µ–≤—ñ–¥–æ–º–æ',
          price: p?.price || 0,
          quantity: i.quantity,
        };
      }),
      total: cart.totalPrice,
      status: 'pending',
    });

    // üîπ –∑–º–µ–Ω—à—É—î–º–æ –∑–∞–ª–∏—à–∫–∏ —Ç–æ–≤–∞—Ä—ñ–≤
    for (const item of cart.items) {
      const productId = getProductId(item.product);
      await this.productModel.findByIdAndUpdate(productId, {
        $inc: { stock: -item.quantity },
      });
    }

    // üîπ –æ—á–∏—â—É—î–º–æ –∫–æ—à–∏–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    await this.cartService.clearCart(dto.userId);

    return order;
  }

  // üîπ –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
  async findAll(userId: string): Promise<Order[]> {
    return this.orderModel.find({ userId }).sort({ createdAt: -1 }).lean();
  }

  // üîπ –æ–¥–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ –¥–µ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—î—é
  async findOne(id: string): Promise<Order> {
    const order = await this.orderModel.findById(id).populate('items.product').lean();
    if (!order) throw new NotFoundException('–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
    return order;
  }

  // üîπ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É (–¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
  async updateStatus(id: string, status: string): Promise<Order> {
    const updated = await this.orderModel.findByIdAndUpdate(id, { status }, { new: true });
    if (!updated) throw new NotFoundException('–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
    return updated;
  }
}

